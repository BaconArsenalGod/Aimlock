-- Settings
local ESP = {
    Enabled = false,
    HighlightColor = Color3.fromRGB(255, 0, 0),
    Objects = {},
}

-- Declarations
local cam = workspace.CurrentCamera
local plrs = game:GetService("Players")
local plr = plrs.LocalPlayer

-- Functions
local function Draw(obj, props)
    local new = Drawing.new(obj)
    
    props = props or {}
    for i, v in pairs(props) do
        new[i] = v
    end
    return new
end

function ESP:Toggle(bool)
    self.Enabled = bool
    for _, highlight in pairs(self.Objects) do
        if highlight.Type == "Highlight" then
            highlight.Component.Visible = bool
        end
    end
end

local highlightBase = {}
highlightBase.__index = highlightBase

function highlightBase:Remove()
    self.Component.Visible = false
end

function highlightBase:Update()
    if not self.PrimaryPart or not self.Object:IsDescendantOf(workspace) then
        self:Remove()
        return
    end

    local cf = self.PrimaryPart.CFrame
    local position, visible = cam:WorldToViewportPoint(cf.p)
    if visible then
        self.Component.Visible = true
        self.Component.Position = Vector2.new(position.X, position.Y)
        self.Component.Color = self.Color
    else
        self.Component.Visible = false
    end
end

function ESP:Add(obj, options)
    if not obj.Parent then
        return warn(obj, "has no parent")
    end

    local highlight = setmetatable({
        Name = options.Name or obj.Name,
        Type = "Highlight",
        Color = options.Color or self.HighlightColor,
        Object = obj,
        PrimaryPart = options.PrimaryPart or obj:IsA("BasePart") and obj or nil,
        Component = Draw("Circle", {
            Thickness = 2,
            NumSides = 50,
            Radius = options.Radius or (obj:IsA("BasePart") and obj.Size.magnitude or 5),
            Filled = false,
            Color = self.HighlightColor,
            Visible = self.Enabled,
        }),
    }, highlightBase)

    self.Objects[obj] = highlight

    obj.AncestryChanged:Connect(function(_, parent)
        if parent == nil then
            highlight:Remove()
        end
    end)
    obj:GetPropertyChangedSignal("Parent"):Connect(function()
        if obj.Parent == nil then
            highlight:Remove()
        end
    end)

    local hum = obj:FindFirstChildOfClass("Humanoid")
    if hum then
        hum.Died:Connect(function()
            highlight:Remove()
        end)
    end

    return highlight
end

local function CharAdded(char)
    local p = plrs:GetPlayerFromCharacter(char)
    ESP:Add(char, {
        Name = p.Name,
        Player = p,
        PrimaryPart = char:FindFirstChild("HumanoidRootPart") or nil,
    })
end

local function PlayerAdded(p)
    p.CharacterAdded:Connect(CharAdded)
    if p.Character then
        CharAdded(p.Character)
    end
end

plrs.PlayerAdded:Connect(PlayerAdded)
for _, player in pairs(plrs:GetPlayers()) do
    if player ~= plr then
        PlayerAdded(player)
    end
end

game:GetService("RunService").RenderStepped:Connect(function()
    for _, highlight in pairs(ESP.Objects) do
        if highlight.Type == "Highlight" and highlight.Update then
            local success, error = pcall(highlight.Update, highlight)
            if not success then
                warn("[ESP Update Error]", error)
            end
        end
    end
end)

return ESP
